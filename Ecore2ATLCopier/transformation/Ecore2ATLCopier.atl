-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI ATL=http://www.eclipse.org/gmt/2005/ATL

module Ecore2ATLCopier;
create OUT : ATL from IN : Ecore;

helper context Ecore!EPackage def: allClasses() : Sequence(Ecore!EClass) =
	self.eClassifiers->select(e |
		e.oclIsKindOf(Ecore!EPackage)
	)->iterate(e; acc : Sequence(Ecore!EClass) = self.eClassifiers->select(e |
							e.oclIsKindOf(Ecore!EClass)
						)->iterate(e; acc : Sequence(Ecore!EClass) = Sequence {} |
							acc->including(e)
						) |
		acc->union(e.allClasses())
	);

helper def: metamodel : Ecore!EPackage= Ecore!EPackage.allInstances()->asSequence()->first();

-- Creates an ATL transformation module from a KM3 metamodel.
rule Metamodel {
	from
		s : Ecore!EPackage (s = thisModule.metamodel)
	to
		mm : ATL!OclModel (
			name <- 'MM'
		),
		t : ATL!Module (
			name <- 'Copy',
			outModels <- Sequence {tm},
			inModels <- Sequence {sm},
			isRefining <- false,
			elements <- s.allClasses()->select(e | not e.abstract)
		),
		sm : ATL!OclModel (
			name <- 'IN',
			metamodel <- mm
		),
		tm : ATL!OclModel (
			name <- 'OUT',
			metamodel <- mm
		)
}

-- selecting features to keep
helper context Ecore!EClass def: sfs : Set(Ecore!EStructuralFeature) =
	self.eAllStructuralFeatures->select(e |
		if e.oclIsKindOf(Ecore!EAttribute) then
			true
		else	-- e.oclIsKindOf(Ecore!EReference)
			if e.eOpposite.oclIsUndefined() then
				true
			else
				if e.eOpposite.ordered then
					false
				else
					true
				endif
			endif
		endif
	);

-- Creates a copy rule for each non-abstract class in the Ecore metamodel.
rule Class {
	from
		s : Ecore!EClass (
			not s.abstract
		)
	to
		t : ATL!MatchedRule (
			isAbstract <- false,
			isRefining <- false,
			name <- 'Copy' + s.name,
			inPattern <- ip,
			outPattern <- op
		),

		-- Creating the source pattern with a filter enforcing
		-- that matched elements must have the class s for type.
		ip : ATL!InPattern (
			elements <- Sequence {ipe},
			filter <- f
		),
		ipe : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet
		),
		ipet : ATL!OclModelElement (
			name <- s.name,
			model <- thisModule.metamodel
		),
		f : ATL!OperationCallExp (
			operationName <- 'oclIsTypeOf',
			source <- fv,
			arguments <- Sequence {ft}
		),
		fv : ATL!VariableExp (
			referredVariable <- ipe
		),
		ft : ATL!OclModelElement (
			name <- s.name,
			model <- thisModule.metamodel
		),

		-- Creating the target pattern.
		op : ATL!OutPattern (
			elements <- Sequence {ope}
		),
		ope : ATL!SimpleOutPatternElement (
			varName <- 't',
			type <- opet,
			bindings <- s.sfs->collect(sf | Tuple{s = s, sf = sf})
		),
		opet : ATL!OclModelElement (
			name <- s.name,
			model <- thisModule.metamodel
		)
}

-- Now generating the bindings for each structural feature that needs
-- to be initialized in the rule.
rule StructuralFeature {
	from
		s : Ecore!EClass, sf : Ecore!EStructuralFeature (
			(not s.abstract) and s.sfs.includes(sf)
		)
	to
		b : ATL!Binding (
			propertyName <- sf.name,
			value <- v
		),
		v : ATL!NavigationOrAttributeCallExp (
			name <- sf.name,
			source <- src
		),
		src : ATL!VariableExp (
			referredVariable <- thisModule.resolveTemp(s, 'ipe')
		)
}